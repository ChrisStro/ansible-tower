- name: Update Servers
  hosts: all
  gather_facts: true

  tasks:
  # Windows
  - name: Updating Windows server
    when: ansible_facts['os_family'] == "Windows"
    block:
      - name: Download needed Windows updates
        ansible.windows.win_updates:
          category_names: '*'
          # - CriticalUpdates
          # - SecurityUpdates
          # - UpdateRollups
          skip_optional: false
          log_path: c:\windows\logs\ansible_windows_update.log
          state: installed
        register: update_result

      - name: Installed following updates
        ansible.builtin.debug:
          msg: "{{ update_result }}"
        when: update_result.updates | length > 0


      - name: Reboot before install any updates
        ansible.windows.win_reboot:
        when: update_result.updates | length > 0

      - name: Installing Windows updates
        ansible.windows.win_updates:
          category_names: '*'
          # - CriticalUpdates
          # - SecurityUpdates
          # - UpdateRollups
          skip_optional: false
          log_path: c:\windows\logs\ansible_windows_update.log
          state: installed
        register: update_result

      - name: Reboot windows server if required
        ansible.windows.win_reboot:
        when: update_result.reboot_required

  # Debian
  - name: Updating debian based distros
    when: ansible_facts['os_family'] == "Debian"
    become: true
    become_method: sudo
    block:
      - name: Running apt update
        ansible.builtin.apt:
          update-cache: true

      - name: Get list of pending upgrades
        ansible.builtin.command: apt-get --simulate dist-upgrade
        args:
          warn: false # don't warn us about apt having its own plugin
        changed_when: false
        register: apt_simulate

      - name: Parse apt-get output to get list of changed packages
        ansible.builtin.set_fact:
          updates: '{{ apt_simulate.stdout_lines | select("match", "^Inst ") | list | sort }}'

      - name: Show pending updates
        ansible.builtin.debug:
          var: updates
        when: updates.0 is defined

      - name: Apt-get autoremove
        ansible.builtin.command: apt-get -y autoremove
        args:
          warn: false
        when: '"Inst linux-image-" in apt_simulate.stdout'

      - name: Run apt-get dist-upgrade
        ansible.builtin.apt:
          upgrade: dist # upgrade all packages to latest version

      - name: Reinstall packages if requested
        ansible.builtin.command: "apt-get -y install --reinstall {{ item }}"
        args:
          warn: false
        with_items:
          - "{{ packages_to_reinstall }}"
        when: packages_to_reinstall is defined

      - name: Check if reboot needed
        ansible.builtin.stat:
          path: /var/run/reboot-required
        register: file_reboot_require

      - name: Reboot node
        ansible.builtin.reboot:
          reboot_timeout: 1800
        when: file_reboot_require is defined
